
#use var PPS limit from previous test?

#- name: Suricata Test
#  connection: ssh
#  gather_facts: false
#  hosts: all
#  vars:
#        pps_limit: "100000" #Default, override with "-e"
#  tasks:

  - name: Clean up possible stalled engines
    shell: killall Suricata-Main; rm -rf "{{sensor_dir}}"/suricata.pid
    become: yes
    ignore_errors: yes

  - name: Begin Suricata
    shell: LD_LIBRARY_PATH=/usr/lib /usr/bin/suricata -c "{{sensor_dir}}"/suricata.yaml -i "{{capture_interface}}" --pidfile "{{sensor_dir}}"/suricata.pid
    register: suricata_async
    become: yes
    poll: 0
    async: 360

  - name: Wait for Warmup
    command: /bin/sleep 20
    async: 45
    poll: 5
    changed_when: false

  - name: Launch Performance Monitor (Factors {{ current_factor_list }}) Run {{ ansible_loop.index }} of {{ ansible_loop.revindex }}
    shell: "./gather_stats.bash {{ discovered_pps_limit }} $(cat /sensor/suricata.pid) {{ capture_interface }} 1 {{ num_packets }} {{ current_factor_list }}"
    args:
      chdir: "{{ sensor_dir }}/"
    register: results_async
    poll: 0
    async: 3600
    become: yes
    changed_when: false

  - debug:
       var: results_async

  - name: Send traffic via tcpreplay ({{ num_packets }} packets at {{ discovered_pps_limit }} per second. Run {{ansible_loop.index}} of {{ansible_loop.revindex}})
    local_action:
        module: shell
        _raw_params: sudo tcpreplay -i {{ send_interface }} --netmap -p {{ discovered_pps_limit }} truncd.pcap
        warn: false
    register: sender
    tags: generate
    async: 360
    poll: 5
    ignore_errors: yes
    changed_when: false

  - debug:
        var: sender.stdout

  - name: Store Generator Stats
    local_action:
        module: shell
        _raw_params: |
            echo "{{discovered_pps_limit}} --" >> "{{send_interface}}-to-{{inventory_hostname}}".log
            echo "{{sender.stdout}}" >> "{{send_interface}}-to-{{inventory_hostname}}".log
    ignore_errors: yes

  - name: Stop Everything
    shell: kill "$(cat suricata.pid)"
    args:
      chdir: "{{ sensor_dir }}"
    become: yes
    ignore_errors: yes
    #failed_when: false

  - name: Wait for Results
    async_status: jid="{{ results_async.ansible_job_id }}"
    become: yes
    register: results
    until: results.finished
    retries: 30
    failed_when: false
    ignore_errors: yes

  - name: Copy Results
    fetch:
      src: "{{sensor_dir}}/{{ inventory_hostname }}-{{capture_driver}}-Suricata-Main-results-verbose.csv"
      dest: "results/{{ inventory_hostname }}-{{capture_driver}}-Suricata-Main-results-run{{test_counter}}-verbose.csv"
      flat: yes
    changed_when: false

  - name: Copy Totals
    fetch:
      src: "{{sensor_dir}}/{{ inventory_hostname }}-{{capture_driver}}-Suricata-Main-results.csv"
      dest: "results/{{ inventory_hostname }}-{{capture_driver}}-Suricata-Main-results-run{{test_counter}}.csv"
      flat: yes
    changed_when: false

  - name: Display Running Results
    debug:
        var: results.stdout



 # - set_fact:
 #     suricata_drops: "{{ suricata_result.stdout_lines | string | regex_search('drop: (\\d+)') | regex_search('\\d+') }}"
 #     suricata_packets: "{{ suricata_result.stdout_lines | string | regex_search('pkts: (\\d+)') | regex_search('\\d+') }}"



 # - debug: msg="Suricata packet drop {{ suricata_drops | regex_search('\d+') }}"
 # - debug: msg="Interface drops {{ post.stdout|int - pre.stdout|int }}"
 # - debug: msg="PPS Limit- {{ pps_limit }} -- Drop count before test {{ pre.stdout|int }} and after test {{ post.stdout|int }} (diff {{ post.stdout|int - pre.stdout|int }})"
 # - debug: msg="{{ suricata_result.stdout_lines }}"
