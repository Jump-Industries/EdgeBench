############Setup pre-reqs#############
#https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html#variables-discovered-from-systems-facts
- name: Prepare Sensors
  connection: ssh
  gather_facts: true
  hosts: all
  vars_files: vars.yml

###Install environment
  tasks:

    #Only supporting debian sensors at this point though yum should not be a problem as future work
  - name: Check OS Version
    fail: msg="Currently only supports Debian based sensors."
    when: ansible_facts['os_family'] != "Debian"

  #This assumes all your SSH passwords are the same.
  #Or, run this playbook once per host with "-t auth -l "hostname" -k -K"
  - name: Set SSH Keys
    authorized_key:
        user: "{{ansible_user}}"
        state: present
        key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
    tags: auth

  - name: Setup Passwordless sudo
    lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%sudo'
        line: '%sudo ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'
    tags: auth
    become: yes

  - name: Install Prerequisites (may take awhile)
    apt:
      name: "{{ packages }}"
      #update_cache: yes
      force_apt_get: yes
    vars:
        packages:
        - lshw
        - build-essential
        - libyaml-0-2
        - libyaml-dev
        - pkg-config
        - zlib1g
        - zlib1g-dev
        - libnet1-dev
        - libpcre3
        - libpcre3-dbg
        - libpcre3-dev
        - libyaml-dev
        - libpcap-dev
        - python-yaml
        - libcap-ng-dev
        - libcap-ng0
        - libmagic-dev
        - liblz4-dev
        - libhtp-dev
        - libjansson-dev
        - libnspr4-dev
        - libnss3-dev
        - rustc
        - libgeoip-dev
        - liblua5.1-dev
        - libhiredis-dev
        - libevent-dev
        - cargo
        - bc
        - git
        - tcpdump
        - python-apt
        - make
        - nano
        - locate
    ignore_errors: yes
    become: yes

  - name: Create Sensor Directory
    file:
      path: "{{ sensor_dir }}"
      state: directory
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: '0777'
    become: yes

  - name: Create Log Directory
    file:
      path: "{{ sensor_dir }}/log"
      state: directory
      mode: '0777'

  - name: Copy Default Suricata Rules
    copy:
      src: suricata.rules
      dest: "{{ sensor_dir }}/suricata.rules"
      mode: '0766'
    tags: suricata

  - name: Download and Unpack Suricata Source
    unarchive:
      src: https://www.openinfosecfoundation.org/download/suricata-5.0.0.tar.gz
      dest: "{{ sensor_dir }}"
      remote_src: yes
      creates: "{{ sensor_dir }}/suricata-5.0.0/"
    register: suricata_source
    tags: suricata

  - name: Check Previuos Installs
    stat:
      path: "/usr/bin/suricata"
    register: previous_failure
    tags: suricata

  - name: Run configure
    shell: "./configure --prefix=/usr/ --sysconfdir=/etc/ --localstatedir=/var/"
    args:
      chdir: "{{ sensor_dir }}/suricata-5.0.0"
      creates: "{{ sensor_dir }}/suricata-5.0.0/Makefile"
    register: suricata_version
    when: suricata_source is changed or not previous_failure.stat.exists
    tags: suricata

  - name: Build Suricata Latest
    shell: make
    args:
      chdir: "{{ sensor_dir }}/suricata-5.0.0/"
    register: suricata_build
    when: suricata_version is changed
    tags: suricata

  - name: Install Suricata Latest
    shell: |
        make install-conf
        make install
    args:
      chdir: "{{ sensor_dir }}/suricata-5.0.0/"
    become: yes
    tags: suricata
    when: suricata_build is changed

  - name: Standardize Hostname
    shell: |
        hostnamectl set-hostname {{ ansible_hostname }}
        echo "127.0.0.1    {{ ansible_hostname }}" > /etc/hosts
    become: yes
    when: ansible_facts['hostname'] != ansible_hostname

  - name: Clean Up old Results
    shell: |
        rm -rf {{ sensor_dir }}/*.csv
        rm -rf {{ sensor_dir }}/*.pid
        rm -rf counters
    args:
        warn: false
    become: yes
    tags: wipe

  - name: Reboot to apply updates
    reboot:
    become: yes
    tags: reboot

##Generator Setup##
#This assumes your ansible host is also the traffic generator. It doesnt have to be..
- name: Prepare Traffic Generator
  connection: local
  gather_facts: true
  hosts: localhost

  tasks:
  - name: Install Prerequisites (may take awhile)
    when: ansible_facts['os_family'] == "Debian"
    apt:
      name: "{{ packages }}"
      force_apt_get: yes
    vars:
        packages:
        #this may be missing some things to build fragroute support
        #fragrout and tcpreplay-edit are needed to fix dataset pcaps that have jumbo (up to 64K) frames
        - build-essential
        - libpcap-dev
        - dnet-common
        - libdumbnet-dev
        - libdnet
        - libevent1-dev
        - libdnet-dev
        - libdumbnet1
        - nano
        - locate
        - docker.io
    ignore_errors: yes
    become: yes

  - name: Set Docker Permissions
    shell: usermod -aG docker $USER
    become: yes
    ignore_errors: yes
    
  - name: Create Docker Network
    docker_network:
      name: experiment

  - name: Grab required Python packages
    pip:
       name:
       - matplotlib 
       - pandas 
       - scipy 
       - numpy 
       - researchpy 
       - seaborn 
       - probscale 
       - statsmodels 
       - pytest
    become: yes

  - name: Create Generator Directory
    file:
      path: |
        "{{ generator_dir }}"
        "{{ generator_dir }}/results"
        "{{ generator_dir }}/results/verbose"
        "{{ generator_dir }}/results/anova"
      state: directory
      mode: '0777'
    become: yes


    ## netmap ##
  - name: Clone Latest netmap Source
    git:
        repo: https://github.com/luigirizzo/netmap.git
        dest: "{{ generator_dir }}/netmap"
    register: netmap_source
    tags: netmap

    #Using this specific NIC so select it's driver manually
    #Netmaps auto detect is flaky esp on kernel 5+
  - name: Build netmap Makefile
    shell: ./configure --select-version=igb:5.3.5.39 --driver-suffix=-netmap
    args:
      chdir: "{{ generator_dir }}/netmap"
      #creates: "{{ generator_dir }}/netmap/config.status"
    register: netmap_version
    when: netmap_source is changed
    tags: netmap

  - name: Build netmap
    shell: make
    args:
        chdir: "{{ generator_dir }}/netmap"
        #creates: "{{ generator_dir }}/netmap/netmap.ko"
    register: netmap_build
    when: netmap_version is changed
    tags: netmap

  - name: Install netmap
    shell: make install
    args:
        chdir: "{{ generator_dir }}/netmap"
    become: yes
    register: netmap_install
    when: netmap_build is changed
    tags: netmap

    #anytime the kernel is updated these modules will need rebuilt
    #if this fails after a reboot the kernel may have changed, 
    #delete the netmap/ folder and rebuild it
  - name: Enable Netmap Drivers
    shell: |
     rmmod igb 2> /dev/null
     rmmod igb_netmap 2> /dev/null
     rmmod netmap 2> /dev/null
     insmod {{ generator_dir }}/netmap/netmap.ko
     insmod {{ generator_dir }}/netmap/igb/igb-netmap.ko
    become: yes
    tags: netmap

   ## tcpreplay ##
  - name: Clone tcpreplay Source
    unarchive:
        src: https://github.com/appneta/tcpreplay/releases/download/v4.3.1/tcpreplay-4.3.1.tar.xz
        dest: "{{ generator_dir }}"
        remote_src: yes
        creates: "{{ generator_dir }}/tcpreplay-4.3.1/"
    register: tcpreplay_source

  - name: Build tcpreplay Makefile
    shell: "./configure --with-netmap={{ generator_dir }}/netmap"
    args:
      chdir: "{{ generator_dir }}/tcpreplay-4.3.1"
      #creates: "{{ generator_dir }}/tcpreplay-4.3.1/Makefile"
    when: tcpreplay_source is changed or netmap_build is changed
    register: tcpreplay_version

  - name: Build tcpreplay
    shell: make
    args:
      chdir: "{{ generator_dir }}/tcpreplay-4.3.1/"
      #creates: "{{ generator_dir }}/tcpreplay-4.3.1/src/tcpreplay"
    register: tcpreplay_build
    when: tcpreplay_version is changed

  - name: Install tcpreplay
    shell: make install
    args:
      chdir: "{{ generator_dir }}/tcpreplay-4.3.1/"
    become: yes
    when: tcpreplay_version is changed
    
  - name: Pull Elasticsearch Docker Image
    docker_container:
        name: elastic
        image: elasticsearch:7.5.0
    
  - name: Pull Kibana Docker Image
    docker_container:
        name: kibana
        image: kibana:7.5.0
    
    
#starting ES and Kibana on master    
#docker run -d --name kibana --net experiment -p 5601:5601 --rm kibana:7.5.0
#docker run -d --name elasticsearch --net experiment -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" --rm elasticsearch:7.5.0
