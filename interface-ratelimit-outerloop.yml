
- name: Begin Initial Middle Loop
  include_tasks: interface-ratelimit-middleloop.yml
  loop: "{{ factor_combos }}" #This will run 2^(#factors) times
  loop_control:
   loop_var: current_factor_list
   index_var: factor_idx
   extended: yes
  when: "test_counter == 1"
  tags:
    - workload
    - initial

- name: Run Initial ANOVA Test
  local_action:
    module: shell
    _raw_params: |
        python anova.py 'results/{{inventory_hostname}}-{{capture_driver}}-ksoftirqd0-results-run1.csv' nicdrop,avg "{{total_factors}}" "{{replicates|length}}" 0.05 "{{ inventory_hostname }}"
  register: anova
  tags: anova
  ignore_errors: yes
  changed_when: false
  when: "test_counter == 1"

- name: Set Initial Significant Factors
  set_fact:
     significant_factors_array: "{{anova.stdout_lines[anova.stdout_lines|length -1].split(\",\")}}"
     significant_factors_string: "{{anova.stdout_lines[anova.stdout_lines|length -1]}}"
     significant_factors_history: "{{significant_factors_history}} + [ '{{anova.stdout_lines[anova.stdout_lines|length -1]}}' ]"
     target_to_beat: "{{anova.stdout_lines[anova.stdout_lines|length -3]|int}}"
     last_loop_best: "{{anova.stdout_lines[anova.stdout_lines|length -3]|int}}"
     last_loop_best_history: "{{last_loop_best_history}} + [ '{{anova.stdout_lines[anova.stdout_lines|length -3]|int}}' ]"
  when: "test_counter == 1"

#- name: Second Chance Mean Test
#  local_action:
#    module: shell
#    _raw_params: |
#        python best-mean.py 'results/{{ inventory_hostname }}-{{capture_driver}}-ksoftirqd0-results-run1.csv' nicdrop,avg {{target_to_beat}}
#  register: second_chance
 #if the last item in loop and not inital run
#  when: "test_counter == 1 and 'NONE' in significant_factors_array"

#- name: Set Second Chance Significant Factors
#  set_fact:
#     significant_factors_array: "{{second_chance.stdout_lines[anova.stdout_lines|length -1].split(\",\")}}"
#     significant_factors_string: "{{second_chance.stdout_lines[anova.stdout_lines|length -1]}}"
#     significant_factors_history: "{{significant_factors_history}} + [ '{{second_chance.stdout_lines[second_chance.stdout_lines|length -1]}}' ]"
#  when: "'NONE' in significant_factors_array"

- name: Record Significant A Level
  set_fact:
   A_levels: "{{A_levels}} + [ '{{NAPI_budget|int*loop_multiplier|int}}' ]"
  when: "'A' in significant_factors_string"

- name: Record Significant B Level
  set_fact:
   B_levels: "{{B_levels}} + [ '{{backlog|int*loop_multiplier|int}}' ]"
  when: "'B' in significant_factors_string"

- name: Record Significant C Level
  set_fact:
   C_levels: "{{C_levels}} + [ '{{rmem_max|int*loop_multiplier|int}}' ]"
  when: "'C' in significant_factors_string"

- name: Record Significant D Level
  set_fact:
   D_levels: "{{D_levels}} + [ '{{rfs_table|int*loop_multiplier|int}}' ]"
  when: "'D' in significant_factors_string"

- name: Record Significant E Level
  set_fact:
   E_levels: "{{E_levels}} + [ '{{backlog_weight|int*loop_multiplier|int}}' ]"
  when: "'E' in significant_factors_string"


- name: Increment Test Counter
  set_fact:
     test_counter: "{{ test_counter | int + 1 }}"
     
- name: Increment Loop Multiplier
  set_fact:     
     loop_multiplier: "{{ test_counter|int**test_counter|int }}"     

- name: Reset Results
  shell: |
      rm -rf {{ sensor_dir }}/*.csv
      rm -rf {{ sensor_dir }}/*.pid
  args:
      warn: false
  become: yes

- name: Target To Beat
  debug:
    msg: "Target to Beat is {{target_to_beat}}. Using Factors {{significant_factors_array | to_yaml}}"

- name: Begin Middle Loop {{test_counter}}
  include_tasks: interface-ratelimit-middleloop.yml
  loop: "{{significant_factors_array}}"
  loop_control:
    extended: yes
    loop_var: current_factor_list
    index_var: inner_index
  when: "'NONE' not in significant_factors_array"

- name: Last Loop Results
  debug:
    msg: "Last Loop best was {{last_loop_best}}. Needs to beat {{target_to_beat}}. Was Iteration {{ test_counter }}"

- name: Check Last Loop Results
  block:
    - name: Check Recursive Base Case
      fail:
        #msg: "Continuing {{test_counter}} < 4"
      #when: "test_counter | int < 4" #Or loop set number of times
        msg: "Still room to improve {{last_loop_best}} < {{target_to_beat}}"
      when: "last_loop_best < target_to_beat" #Determine what "better" means here

  rescue:
    - name: Update Target to Beat
      set_fact:
         target_to_beat: "{{ last_loop_best }}"
         loop_multiplier: "{{ test_counter|int**test_counter|int }}"

    #Recursively call self to keep going
    - name: Begin New Round
      include_tasks: interface-ratelimit-outerloop.yml
