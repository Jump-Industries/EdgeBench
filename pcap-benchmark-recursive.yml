
- name: Begin First Outer Loop
  include_tasks: pcap-benchmark-outerloop.yml
  loop: "{{ factor_combos }}" #This will run 2^(#factors) times
  loop_control:
   loop_var: current_factor_list
   index_var: factor_idx
   extended: yes
  when: "test_counter == 1"
  tags:
    - discover
    - initial

- name: Run Initial ANOVA Test
  local_action:
    module: shell
    _raw_params: |
        python anova.py 'results/{{ inventory_hostname }}-{{capture_driver}}-tcpdump-results-run1.csv' kerndrop,sum "{{total_factors}}" "{{replicates|length}}" 0.05
  register: anova
  tags: anova
  ignore_errors: yes
  changed_when: false
  when: "test_counter == 1"

- name: Set Significant Factors
  set_fact:
     significant_factors: "{{anova.stdout_lines[anova.stdout_lines|length -1].split(\",\")}}"
     target_to_beat: "{{anova.stdout_lines[anova.stdout_lines|length -3]|int}}"
     cacheable: yes
  when: "test_counter == 1"

- name: Significant Factors
  debug:
    var: significant_factors

- name: Increment Test Counter
  set_fact:
     test_counter: "{{ test_counter | int + 1 }}"
     
- name: Reset Results
  shell: |
      rm -rf {{ sensor_dir }}/*.csv
      rm -rf {{ sensor_dir }}/*.pid
      rm -rf {{ sensor_dir }}/counters
  args:
      warn: false
  become: yes     
     
- name: Target To beat
  debug:
      msg: "Last Loop best was {{last_loop_best}}. Needs to beat {{target_to_beat}}. On Loop {{ test_counter }}"

- name: Continue Outer Loop
  include_tasks: pcap-benchmark-outerloop.yml
  loop: "{{significant_factors}}"
  loop_control:
    extended: yes
    loop_var: current_factor_list
    index_var: inner_index
  when: "'NONE' not in significant_factors"

- name: Check Last Loop Results
  block:
    - name: Check Recursive Base Case
      fail:
        msg: "Continuting {{test_counter}} < 4" #Maybe run a set number of times....
        #msg: "Still room to improve {{last_loop_best}} < {{target_to_beat}}" #or have a target
      when: "test_counter | int < 4" 
      #when: "last_loop_best < target_to_beat" 
      
  rescue:
    - name: Update Target to Beat
      set_fact:
         target_to_beat: "{{ last_loop_best }}"
         loop_multiplier: "{{ test_counter|int**test_counter|int }}"
    

    #Recursively call self to keep going
    - name: Begin New Round
      include_tasks: pcap-benchmark-recursive.yml


