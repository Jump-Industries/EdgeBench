###Master variable file for all playbooks

### 5 Factors
total_factors: 5
factor_combos: [N,A,B,AB,C,AC,BC,ABC,
                D,AD,BD,ABD,CD,ACD,BCD,ABCD,
                E,AE,BE,ABE,CE,ACE,BCE,ABCE,
                DE,ADE,BDE,ABDE,CDE,ACDE,BCDE,ABCDE]
    
### 3 Factors ex.   
#[N,A,B,AB,C,AC,BC,ABC]
                
### 4 Factors ex.               
#[N,A,B,AB,C,AC,BC,ABC,D,AD,BD,ABD,CD,ACD,BCD,ABCD]
#ansible-playbook -i inventory.yml -e "total_factors=4" -e '{"factor_combos": [N,A,B,AB,C,AC,BC,ABC,D,AD,BD,ABD,CD,ACD,BCD,ABCD]}' pcap-benchmark-main.yml

#To override factors from command line use -e..... 
#ansible-playbook -i inventory.yml -e "total_factors=3" -e '{"factor_combos": [N,A,B,AB,C,AC,BC,ABC]}' pcap-benchmark-main.yml



total_combinations: "{{2 ** total_factors }}" #2^k

replicates: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
             21,22,23,24,25,26,27,28,29,30,31,32]
#replicates: [1,2,3,4,5]
#replicates: [1,2]
#must be an array like this for it to work


###Variable controls###

#Used to store values actually attempted
A_levels: []
B_levels: []
C_levels: []
D_levels: []
E_levels: []
significant_factors_history: []
last_loop_best_history: []

#New API (NAPI) IRQ budget
#default = 300. Will eventually hit hard time limit of "2 jiffies"
NAPI_budget: 1200

#Max Kernel Backlog
#default = 1000
backlog:  32768

#Socket receive queue memory, in bytes
#default = 212992
rmem_max: 83886080

#Receive Flow Steering (RFS) hash table size and per queue flow count
#default = off
rfs_table: 32768
rfs_flow_cnt: 32768

#NAPI backlog poll loop weight
#default = 64
backlog_weight: 1200

#libpcap buffer size, in KiB
#default = 2 MB  = ~2000 KiB
libpcap_buffer: 250000 #64 MB
libpcap_buffer_size: 2000 #initial

#suricata runmode
#default = autofp (flow pin)
suricata_runmode: workers

#suricata max-pending-packets
#default = 1024
suricata_max_pending: 8096

#suricata detect memory grouping aggressiveness
#default = medium
suricata_detect_profile: high

#af-packet memory map ring feature
#default = no
af_packet_mmap: 'yes'

###Static controls###

#RX_checksumming on/off
#More research may be worthwhile here. It seemed to boost suricata when off?
#lan78xx driver on rpi3 fails to read random traffic from pkt-gen when on. 
#probably due to UDP header / payload mismatch
#default = on
rx_checksum_status: 'off'

#RX_timestamping on/off
#Moves timestamping of rx packets to after they enter load balanced RPS queue vs before
#default = on
rx_timestamp_status: '0'

#Large Receive / Generic Receive offload on/off.
#Off for suricata
#default = on
lro_status: 'off'
gro_status: 'off'


###other vars###
packet_size_max: "1500"
packet_size_min: "64"
num_packets_30sec: "{{ line_pps_limit|int * 30 }}"
num_packets_cic_monday: 17997887 #avg 590 bytes
num_packets_cic_thursday: 14106798 #avg size 576 bytes
significant_factors_string: ""
test_counter: 1
loop_multiplier: 1
